// GPS / NMEA 
#define MAX_NMEA_MSG_BYTES 82
#define MAX_NMEA_BUFFER_BYTES 256
#define GPS_OUTPUT_FORMAT "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0*28"

// FIFO
#define FIFO_SIZE 8 // Maximum for RP2040 (8 x 32bits)
#ifdef ARDUINO_ARCH_ESP32
// No FIFO, so we use a queue
#include "queue.h"
#endif

// Dataset
#define METRIC_TYPES sizeof(metricMeta) / sizeof(MetricMeta)

// Wifi Headers
#ifdef ARDUINO_CHALLENGER_2040_WIFI_BLE_RP2040
#include <WiFiEspAT.h>
#else
#include <WiFi.h>
#include <WiFiClientSecure.h>
#endif

/*
 * Nanopb protobuf implementation: https://jpa.kapsi.fi/nanopb/
 */
#include "pb.h"
#include "pb_encode.h"
#include "pb_common.h"

/* 
 * OTel Proto Definitions: https://github.com/open-telemetry/opentelemetry-proto
 *
 * Generated by:
 * ../nanopb-master/generator/nanopb_generator.py -L quote metrics.proto
 * ../nanopb-master/generator/nanopb_generator.py -L quote common.proto
 * ../nanopb-master/generator/nanopb_generator.py -L quote resource.proto 
 */
#include "metrics.pb.h"
#include "common.pb.h"
#include "resource.pb.h"

// Connection details and secrets
#include "creds.h"

#if defined(ARDUINO_CHALLENGER_2040_WIFI_BLE_RP2040)
// Accelerometer built into Challenger 2040
#define MC3419 1
#endif

#ifdef MC3419
//MC3419
#define ACCEL_ADDR 0x4C
#define ACCEL_REG 0x0D
#else
// MPU9250
#define ACCEL_ADDR 0x68
#define ACCEL_REG 0x3B
#endif

#ifdef ARDUINO_ARCH_ESP32
// ESP32
#include <HardwareSerial.h>
#else
// RP2040
#define GPSSerial Serial1
#endif

#ifdef ARDUINO_CHALLENGER_2040_WIFI_BLE_RP2040
#define ESP8266Serial Serial2
#endif

#include <Wire.h>
#define G_RANGE 2

// Make fixed
extern struct MetricMeta metricMeta[];
